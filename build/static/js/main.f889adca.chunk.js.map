{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["fcl","put","App","props","useState","user","setUser","getBalance","a","search","window","location","params","URLSearchParams","id","get","fetch","method","headers","body","JSON","stringify","uuid","useEffect","subscribe","addr","authentication","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAIAA,MACGC,IAAI,iBAAkB,qCACtBA,IAAI,mBAAoB,kDA8CZC,MA5Cf,SAAaC,GACX,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAU,uCAAG,gCAAAC,EAAA,6DAEbC,EAASC,OAAOC,SAASF,OACzBG,EAAS,IAAIC,gBAAgBJ,GAC7BK,EAAKF,EAAOG,IAAI,MAJH,SAMMC,MAAM,YAAa,CACxCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEhB,OAAMiB,KAAMR,MAXpB,yDAAH,qDAehBS,qBAAU,WACRvB,MAAkBwB,UAAUlB,KAC3B,IAEHiB,qBAAU,WACJlB,GAAQA,EAAKoB,MACflB,MAED,CAACF,IAEJ,IAAMqB,EAAc,uCAAG,sBAAAlB,EAAA,sDACjBH,EAAKoB,KACPzB,MAEAA,MAJmB,2CAAH,qDAQpB,OACE,sBAAK2B,UAAU,MAAf,UACE,6BAAKtB,GAAQA,EAAKoB,KAAO,kCAAoC,OAC7D,wBAAQE,UAAU,WAAWC,QAAS,kBAAMF,KAA5C,SAA+DrB,IAASA,EAAKoB,KAAO,qBAAuB,gBCnClGI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f889adca.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as fcl from '@onflow/fcl';\r\n\r\nfcl.config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nfunction App(props) {\r\n  const [user, setUser] = useState();\r\n\r\n  const getBalance = async () => {\r\n    // Gets the id in the URL\r\n    let search = window.location.search;\r\n    let params = new URLSearchParams(search);\r\n    let id = params.get('id');\r\n\r\n    const response = await fetch('/api/join', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ user, uuid: id }),\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fcl.currentUser().subscribe(setUser);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (user && user.addr) {\r\n      getBalance();\r\n    }\r\n  }, [user]);\r\n\r\n  const authentication = async () => {\r\n    if (user.addr) {\r\n      fcl.unauthenticate();\r\n    } else {\r\n      fcl.authenticate();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>{user && user.addr ? \"You can close your browser now.\" : null}</h1>\r\n      <button className=\"button-9\" onClick={() => authentication()}>{user && !user.addr ? \"Log in with Blocto\" : \"Log out\"}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}